{"version":3,"file":"static/js/286.aae993c0.chunk.js","mappings":"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","sources":["Components/Account/Account.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport useApi from \"../../hooks/useApi\";\nimport endPoints from \"../../api/endPoints\";\nimport AccountForm from \"./AccountEditForm\";\nimport { encryptId } from \"../../utils/encryption\";\nfunction Account() {\n  const { get, del, post, patch } = useApi();\n  const [accounts, setAccounts] = useState([]);\n  const [editAccount, setEditAccount] = useState(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [suggestions, setSuggestions] = useState([]);\n\n  const fetchAccounts = async () => {\n    try {\n      const bookId = localStorage.getItem(\"bookId\");\n      const userId = localStorage.getItem(\"userId\");\n\n      let url = `${endPoints.getAllAccounts}?bookId=${bookId}`;\n\n      if (searchTerm.trim() !== \"\") {\n        url += `&search=${searchTerm}`;\n      }\n\n      const response = await get(url);\n      if (response?.data) {\n        setAccounts(response.data);\n      } else {\n        console.warn(\"No data received from API.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching accounts:\", error.message || error);\n    }\n  };\n  const fetchSuggestions = async (value) => {\n    try {\n      if (!value.trim()) {\n        setSuggestions([]);\n        return;\n      }\n\n      const bookId = localStorage.getItem(\"bookId\");\n      const userId = localStorage.getItem(\"userId\");\n\n      const url = `${endPoints.accountSuggestions}?bookId=${bookId}&userId=${userId}&search=${value}`;\n      const response = await get(url);\n\n      if (response?.status && response.data) {\n        setSuggestions(response.data);\n      } else {\n        setSuggestions([]);\n      }\n    } catch (error) {\n      console.error(\"Error fetching suggestions:\", error.message || error);\n    }\n  };\n\n  const archiveAccount = async (accountId) => {\n    try {\n      const url = `${endPoints.archiveAccount}/${accountId}`;\n      const response = await post(url, {});\n\n      if (response?.status) {\n        setAccounts((prevAccounts) =>\n          prevAccounts.map((group) => ({\n            ...group,\n            accounts: group.accounts.filter((acc) => acc.id !== accountId),\n          }))\n        );\n      } else {\n        console.warn(\"Failed to archive account.\");\n      }\n    } catch (error) {\n      console.error(\"Error archiving account:\", error.message || error);\n    }\n  };\n\n  const deleteAccount = async (accountId) => {\n    const confirmDelete = window.confirm(\n      \"Are you sure you want to delete this account?\"\n    );\n    if (!confirmDelete) return;\n\n    try {\n      const bookId = localStorage.getItem(\"bookId\");\n      const url = `${endPoints.deleteAccount}/${accountId}`;\n      const response = await del(url);\n\n      if (response?.status) {\n        setAccounts((prevAccounts) =>\n          prevAccounts.map((group) => ({\n            ...group,\n            accounts: group.accounts.filter((acc) => acc.id !== accountId),\n          }))\n        );\n      } else {\n        console.warn(\"Failed to delete account.\");\n      }\n    } catch (error) {\n      console.error(\"Error deleting account:\", error.message || error);\n    }\n  };\n\n  useEffect(() => {\n    fetchAccounts();\n\n    const handleBookChange = () => {\n      fetchAccounts(); // Re-fetch accounts when book selection changes\n    };\n\n    window.addEventListener(\"selectedBookUpdated\", handleBookChange);\n\n    return () => {\n      window.removeEventListener(\"selectedBookUpdated\", handleBookChange);\n    };\n  }, [searchTerm]);\n\n  const handleSearchChange = (event) => {\n    const value = event.target.value;\n    setSearchTerm(value);\n  };\n\n  return (\n    <div className=\"container mt-5\">\n      <h4 className=\"mb-3\">Accounts</h4>\n      <div className=\"mb-3 position-relative\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Search by name & type\"\n          value={searchTerm}\n          onChange={(e) => {\n            setSearchTerm(e.target.value);\n            fetchSuggestions(e.target.value); // suggestions call\n          }}\n        />\n\n        {suggestions.length > 0 && (\n          <ul\n            className=\"list-group position-absolute shadow\"\n            style={{\n              zIndex: 1000,\n              maxHeight: \"200px\",\n              overflowY: \"auto\",\n              width: \"300px\", // width कम किया\n            }}\n          >\n            {suggestions.map((s) => (\n              <li\n                key={s.id}\n                className=\"list-group-item list-group-item-action d-flex justify-content-between align-items-center\"\n                style={{ cursor: \"pointer\" }}\n                onClick={() => {\n                  setSearchTerm(s.name);\n                  setSuggestions([]);\n                  fetchAccounts();\n                }}\n              >\n                <span>{s.name}</span>\n                <small className=\"text-muted\">({s.account_type})</small>\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n\n      <div className=\"d-flex justify-content-end mb-3\">\n        <Link\n          to=\"/new-account\"\n          className=\"btn text-white\"\n          style={{ background: \"#019ED3\" }}\n        >\n          <i className=\"bi bi-plus-circle me-2\"></i> Add New Account\n        </Link>\n      </div>\n\n      <table className=\"table table-striped table-bordered\">\n        <thead className=\"table-primary\">\n          <tr>\n            <th scope=\"col\">Account Type</th>\n            <th scope=\"col\">Account Name</th>\n            <th scope=\"col\">Description</th>\n            <th scope=\"col\">Balance</th>\n            <th scope=\"col\">Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {accounts.length > 0 ? (\n            accounts.map((accountGroup) =>\n              accountGroup.accounts.map((account) => (\n                <tr key={account.id}>\n                  <td>{account.account_type}</td>\n                  <td>\n                    <Link\n                      to={`/account/${encryptId(account.id)}`}\n                      state={{ account }}\n                    >\n                      {account.name}\n                    </Link>\n                  </td>\n                  <td>{account.description}</td>\n                  <td\n                    className={\n                      account.balance < 0 ? \"text-danger\" : \"text-success\"\n                    }\n                  >\n                    {account.balance} ₹\n                  </td>\n                  <td>\n                    {/* <button\n                      className=\"btn btn-outline-warning btn-sm me-2\"\n                      onClick={() => archiveAccount(account.id)}\n                      title=\"Archive Account\"\n                    >\n                      <i className=\"bi bi-archive\"></i>\n                    </button> */}\n                    <button\n                      className=\"btn btn-outline-primary btn-sm me-2\"\n                      onClick={() => setEditAccount(account)}\n                      title=\"Edit Account\"\n                    >\n                      <i className=\"bi bi-pencil\"></i>\n                    </button>\n\n                    <button\n                      className=\"btn btn-outline-danger btn-sm\"\n                      onClick={() => deleteAccount(account.id)}\n                      title=\"Delete Account\"\n                    >\n                      <i className=\"bi bi-trash\"></i>\n                    </button>\n                  </td>\n                </tr>\n              ))\n            )\n          ) : (\n            <tr>\n              <td colSpan=\"5\" className=\"text-center\">\n                No accounts available\n              </td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n      {editAccount && (\n        <div\n          className=\"modal d-block\"\n          tabIndex=\"-1\"\n          style={{ background: \"rgba(0,0,0,0.5)\" }}\n        >\n          <div className=\"modal-dialog modal-lg\">\n            <div className=\"modal-content p-3\">\n              <button\n                className=\"btn btn-sm btn-close ms-auto\"\n                onClick={() => setEditAccount(null)}\n              ></button>\n              <AccountForm\n                account={editAccount}\n                onSuccess={() => {\n                  setEditAccount(null);\n                  fetchAccounts(); // reload\n                }}\n              />\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Account;\n"],"names":["get","del","post","patch","useApi","accounts","setAccounts","useState","editAccount","setEditAccount","searchTerm","setSearchTerm","suggestions","setSuggestions","fetchAccounts","async","bookId","localStorage","getItem","url","concat","endPoints","getAllAccounts","trim","response","data","console","warn","error","message","useEffect","handleBookChange","window","addEventListener","removeEventListener","_jsxs","className","children","_jsx","type","placeholder","value","onChange","e","target","userId","accountSuggestions","status","fetchSuggestions","length","style","zIndex","maxHeight","overflowY","width","map","s","cursor","onClick","name","account_type","id","Link","to","background","scope","accountGroup","account","encryptId","state","description","balance","title","confirm","deleteAccount","accountId","prevAccounts","group","_objectSpread","filter","acc","colSpan","tabIndex","AccountForm","onSuccess"],"sourceRoot":""}