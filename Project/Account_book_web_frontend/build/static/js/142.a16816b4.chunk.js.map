{"version":3,"file":"static/js/142.a16816b4.chunk.js","mappings":"oMA2RA,QAtRA,WACE,MAAM,IAAEA,EAAG,KAAEC,IAASC,EAAAA,EAAAA,MACfC,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,KAC1CC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAS,OACxCG,EAAYC,IAAiBJ,EAAAA,EAAAA,UAAS,IACvCK,EAAoBC,iBAAwB,IAAjBC,EAAMC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GACxC,MAAMG,EAASC,aAAaC,QAAQ,UAEpC,IACE,MAAMC,QAAiBnB,EACrBoB,EAAAA,EAAUC,8CACV,CACEC,OAAQ,CAAEV,SAAQI,YAItB,GAAY,OAARG,QAAQ,IAARA,GAAAA,EAAUI,KAAM,CAClB,MAAM,YAAEC,EAAc,GAAE,aAAEC,EAAe,IAAON,EAASI,KAEnDG,EAAW,IAAIF,KAAgBC,GAAcE,KACjD,CAACC,EAAGC,IAAM,IAAIC,KAAKD,EAAEE,kBAAoB,IAAID,KAAKF,EAAEG,mBAGtD3B,EAAgBsB,EAClB,CACF,CAAE,MAAOM,GACPC,QAAQD,MAAM,+BAAgCA,EAAME,SAAWF,EACjE,CACF,EA0EA,OAxEAG,EAAAA,EAAAA,WAAU,KACRzB,KACC,KACHyB,EAAAA,EAAAA,WAAU,KACR,MAAMC,EAAoBC,IACFpB,aAAaC,QAAQ,UAC3CR,EAAkBF,IAMpB,OAHA8B,OAAOC,iBAAiB,sBAAuBH,GAGxC,KACLE,OAAOE,oBAAoB,sBAAuBJ,KAEnD,CAAC5B,KA0DFiC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,eAAcC,SAAC,2BAE7BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,EAAAA,KAAA,SACEC,KAAK,OACLH,UAAU,eACVI,YAAY,sBACZC,MAAOvC,EACPwC,SAlEkBX,IAC1B,MAAMU,EAAQV,EAAEY,OAAOF,MACvBtC,EAAcsC,GACdrC,EAAkBqC,WAoEhBH,EAAAA,EAAAA,KAAA,OAAKF,UAAU,mBAAkBC,UAC/BF,EAAAA,EAAAA,MAAA,SAAOC,UAAU,mCAAkCC,SAAA,EACjDC,EAAAA,EAAAA,KAAA,SAAOF,UAAU,gBAAeC,UAC9BF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,QACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,UACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,UACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,cACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,iBACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,QACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,iBAGRC,EAAAA,EAAAA,KAAA,SAAAD,SACGxC,EAAaW,OAAS,EACrBX,EAAa+C,IAAKC,IAAU,IAADC,EAAAC,EACzB,MAAMC,EAA6B,eAAdH,EAAKN,KACpBU,EAAUJ,EAAKK,iBAAmB,GAClCC,EAAYF,EAAQzC,OACpB4C,EAAgBH,EAAQI,OAC3BtB,GAA8B,cAAxBA,EAAEuB,mBACT9C,OACI+C,EAAcJ,EAAYC,EAC1BI,EAAcR,GAAgC,IAAhBO,EAEpC,OACEpB,EAAAA,EAAAA,MAACsB,EAAAA,SAAc,CAAApB,SAAA,EACbF,EAAAA,EAAAA,MAAA,MACEC,UAAS,GAAAsB,OAAKV,EAAe,iBAAmB,GAAE,KAAAU,OAChD1D,IAAgB6C,EAAKc,GAAK,aAAe,IAE3CC,QAASA,KAAMZ,WAhGhBW,EAgG0Cd,EAAKc,QA/FhE1D,EAAgB4D,GAAUA,IAASF,EAAK,KAAOA,IAD9BA,OAgGmDtB,SAAA,EAElDC,EAAAA,EAAAA,KAAA,MAAAD,SAAKQ,EAAKc,MACVrB,EAAAA,EAAAA,KAAA,MAAAD,SAAKQ,EAAKiB,oBACV3B,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CACwB,QADxBS,EACGD,EAAKpB,wBAAgB,IAAAqB,OAAA,EAArBA,EAAuBiB,MAAM,KAAK,GAAI,IACtClB,EAAKmB,qBAER1B,EAAAA,EAAAA,KAAA,MAAAD,SAAKQ,EAAKoB,UAAY,SACtB3B,EAAAA,EAAAA,KAAA,MAAAD,SAAKQ,EAAKqB,aAAe,SACzB5B,EAAAA,EAAAA,KAAA,MAAAD,SAAKQ,EAAKsB,iBAAmB,SAC7B7B,EAAAA,EAAAA,KAAA,MAAAD,SACe,GAAAqB,OAAZV,EACMH,EAAKuB,kBACLvB,EAAKwB,OADiB,gBAKhCrB,GAAgBhD,IAAgB6C,EAAKc,KACpCrB,EAAAA,EAAAA,KAAA,MAAAD,UACEF,EAAAA,EAAAA,MAAA,MAAImC,QAAQ,IAAIlC,UAAU,WAAUC,SAAA,EAClCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,OAAMC,SAAA,EACnBC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,oBAAyB,KACZ,QAApBU,EAAAF,EAAK0B,uBAAe,IAAAxB,OAAA,EAApBA,EAAsByB,gBAAiB,UAE1CrC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,OAAMC,SAAA,EACnBC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,oBAAyB,IAChCmB,GACClB,EAAAA,EAAAA,KAAA,QAAMF,UAAU,mBAAkBC,SAAC,gBAInCC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,6BAA4BC,SAAC,gBAKjDF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,OAAMC,SAAA,EACnBC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,kBACRF,EAAAA,EAAAA,MAAA,MAAIC,UAAU,YAAWC,SAAA,EACvBF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAI,eAAac,MACjBhB,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAI,cAAYe,MAChBjB,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAI,YAAUkB,YAIlBjB,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,kBACRF,EAAAA,EAAAA,MAAA,SAAOC,UAAU,qCAAoCC,SAAA,EACnDC,EAAAA,EAAAA,KAAA,SAAOF,UAAU,kBAAiBC,UAChCF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,YACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,cACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,YACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,YACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,YACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,iBAGRC,EAAAA,EAAAA,KAAA,SAAAD,SACGY,EAAQL,IAAI,CAAC6B,EAAKC,KAAS,IAADC,EACzB,MAAMC,EACsB,cAA1BH,EAAInB,kBAEN,OACEnB,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACEF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAKoC,EAAIJ,OAAO,cAChB/B,EAAAA,EAAAA,KAAA,MAAAD,SACuB,QADvBsC,EACGF,EAAII,wBAAgB,IAAAF,OAAA,EAApBA,EAAsBZ,MAAM,KAAK,MAEpCzB,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAAA,QACEF,UAAS,SAAAsB,OACPkB,EAAS,aAAe,aACvBvC,SAEFuC,EAAS,OAAS,cAGvBtC,EAAAA,EAAAA,KAAA,MAAAD,SAAKoC,EAAIK,iBAAmB,SAC5BxC,EAAAA,EAAAA,KAAA,MAAAD,SAAKoC,EAAIN,iBAAmB,SAC5B7B,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAAA,UACEF,UAAS,cAAAsB,OACPkB,EACI,cACA,uBAENhB,QAASA,IAnLtBvD,WACvB,IACE,MAAM0E,EAAU,CACdC,UAAWP,EAAIO,UACfC,WAAYR,EAAIQ,WAChB3B,kBAAmB,YACnB4B,eAAgBT,EAAIS,eACpBpB,iBAAkB,aAClBqB,eAAgBV,EAAIU,gBAGhBtE,QAAiBlB,EAAKmB,EAAAA,EAAUsE,uBAAwBL,GAE1DlE,EAASwE,QACXC,MAAM,oCACNlF,KAEAkF,MAAMzE,EAASe,SAAW,wBAE9B,CAAE,MAAOF,GACP4D,MAAM5D,EAAME,SAAW,sBACzB,GA8JmD2D,CAAiBd,GAChCe,SAAUZ,EAAOvC,SAClB,kBAzBIqC,WAmCjBpC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,WAAUC,UACvBF,EAAAA,EAAAA,MAAA,UACEC,UAAU,yBACVwB,QAASA,IA1KZvD,WACvB,IAAK,IAADoF,EACF,MAAMV,EAAU,CACdC,UAAWU,EAAK9C,IAAKb,GAAMA,EAAEiD,WAC7BC,WAAmB,QAATQ,EAAEC,EAAK,UAAE,IAAAD,OAAA,EAAPA,EAASR,WACrB3B,kBAAmB,aAGfzC,QAAiBlB,EAAKmB,EAAAA,EAAUsE,uBAAwBL,GAE1DlE,EAASwE,QACXC,MAAM,4BACNlF,KAEAkF,MAAMzE,EAASe,SAAW,wBAE9B,CAAE,MAAOF,GACP4D,MAAM5D,EAAME,SAAW,2BACzB,GAwJyC+D,CAAiB1C,GAChCuC,SAAUhC,EAAYnB,SAAA,EAEtBC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,4BAA4B,+BA9GhCS,EAAKc,OAyH9BrB,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAAA,MAAIgC,QAAQ,IAAIlC,UAAU,cAAaC,SAAC,+CAUxD,C","sources":["Components/UpcomingTransaction/UpcomingTransaction.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport useApi from \"../../hooks/useApi\";\nimport endPoints from \"../../api/endPoints\";\nimport \"./UpcomingTransactions.css\";\n\nfunction UpcomingTransactions() {\n  const { get, post } = useApi();\n  const [combinedList, setCombinedList] = useState([]);\n  const [expandedRow, setExpandedRow] = useState(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const fetchTransactions = async (search = \"\") => {\n    const bookId = localStorage.getItem(\"bookId\");\n\n    try {\n      const response = await get(\n        endPoints.get_all_upcoming_collections_and_transactions,\n        {\n          params: { search, bookId },\n        }\n      );\n\n      if (response?.data) {\n        const { collections = [], transactions = [] } = response.data;\n\n        const combined = [...collections, ...transactions].sort(\n          (a, b) => new Date(b.transaction_date) - new Date(a.transaction_date)\n        );\n\n        setCombinedList(combined);\n      }\n    } catch (error) {\n      console.error(\"Error fetching transactions:\", error.message || error);\n    }\n  };\n\n  useEffect(() => {\n    fetchTransactions();\n  }, []);\n  useEffect(() => {\n    const handleBookChange = (e) => {\n      const updatedBookId = localStorage.getItem(\"bookId\");\n      fetchTransactions(searchTerm); // use existing searchTerm state\n    };\n\n    window.addEventListener(\"selectedBookUpdated\", handleBookChange);\n\n    // Clean up\n    return () => {\n      window.removeEventListener(\"selectedBookUpdated\", handleBookChange);\n    };\n  }, [searchTerm]);\n\n  const handleSearchChange = (e) => {\n    const value = e.target.value;\n    setSearchTerm(value);\n    fetchTransactions(value);\n  };\n\n  const toggleRow = (id) => {\n    setExpandedRow((prev) => (prev === id ? null : id));\n  };\n\n  const handleEditOneEmi = async (emi) => {\n    try {\n      const payload = {\n        accountId: emi.accountId,\n        to_account: emi.to_account,\n        collection_status: \"Completed\",\n        coll_emi_times: emi.coll_emi_times,\n        transaction_type: \"COLLECTION\",\n        transaction_id: emi.transaction_id,\n      };\n\n      const response = await post(endPoints.updateCollectionStatus, payload);\n\n      if (response.status) {\n        alert(\"EMI status updated successfully!\");\n        fetchTransactions();\n      } else {\n        alert(response.message || \"Something went wrong.\");\n      }\n    } catch (error) {\n      alert(error.message || \"Error updating EMI.\");\n    }\n  };\n\n  const handleEditAllEmi = async (emis) => {\n    try {\n      const payload = {\n        accountId: emis.map((e) => e.accountId),\n        to_account: emis[0]?.to_account,\n        collection_status: \"Completed\",\n      };\n\n      const response = await post(endPoints.updateCollectionStatus, payload);\n\n      if (response.status) {\n        alert(\"All EMIs marked as paid!\");\n        fetchTransactions();\n      } else {\n        alert(response.message || \"Error while updating.\");\n      }\n    } catch (error) {\n      alert(error.message || \"Error updating all EMIs.\");\n    }\n  };\n\n  return (\n    <div className=\"container mt-4\">\n      <h4 className=\"mb-3 fw-bold\">Upcoming Transactions</h4>\n\n      <div className=\"row mb-3\">\n        <div className=\"col-md-4\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Search by category \"\n            value={searchTerm}\n            onChange={handleSearchChange}\n          />\n        </div>\n      </div>\n\n      <div className=\"table-responsive\">\n        <table className=\"table table-bordered table-hover\">\n          <thead className=\"table-primary\">\n            <tr>\n              <th>ID</th>\n              <th>Type</th>\n              <th>Date</th>\n              <th>Category</th>\n              <th>Description</th>\n              <th>To</th>\n              <th>Amount</th>\n            </tr>\n          </thead>\n          <tbody>\n            {combinedList.length > 0 ? (\n              combinedList.map((item) => {\n                const isCollection = item.type === \"COLLECTION\";\n                const emiList = item.emi_transaction || [];\n                const totalEmis = emiList.length;\n                const completedEmis = emiList.filter(\n                  (e) => e.collection_status === \"Completed\"\n                ).length;\n                const pendingEmis = totalEmis - completedEmis;\n                const allEmisPaid = isCollection && pendingEmis === 0;\n\n                return (\n                  <React.Fragment key={item.id}>\n                    <tr\n                      className={`${isCollection ? \"cursor-pointer\" : \"\"} ${\n                        expandedRow === item.id ? \"table-info\" : \"\"\n                      }`}\n                      onClick={() => isCollection && toggleRow(item.id)}\n                    >\n                      <td>{item.id}</td>\n                      <td>{item.transaction_type}</td>\n                      <td>\n                        {item.transaction_date?.split(\"T\")[0]}{\" \"}\n                        {item.transaction_time}\n                      </td>\n                      <td>{item.category || \"N/A\"}</td>\n                      <td>{item.description || \"N/A\"}</td>\n                      <td>{item.target_acc_name || \"N/A\"}</td>\n                      <td>\n                        {isCollection\n                          ? `${item.coll_total_amount} ₹`\n                          : `${item.amount} ₹`}\n                      </td>\n                    </tr>\n\n                    {isCollection && expandedRow === item.id && (\n                      <tr>\n                        <td colSpan=\"7\" className=\"bg-light\">\n                          <div className=\"mb-2\">\n                            <strong>Repayment Type:</strong>{\" \"}\n                            {item.coll_kisht_type?.toUpperCase() || \"N/A\"}\n                          </div>\n                          <div className=\"mb-2\">\n                            <strong>Payment Status:</strong>{\" \"}\n                            {allEmisPaid ? (\n                              <span className=\"badge bg-success\">\n                                Fully Paid\n                              </span>\n                            ) : (\n                              <span className=\"badge bg-warning text-dark\">\n                                Pending\n                              </span>\n                            )}\n                          </div>\n                          <div className=\"mb-2\">\n                            <strong>EMI Summary:</strong>\n                            <ul className=\"ps-3 mb-0\">\n                              <li>Total EMIs: {totalEmis}</li>\n                              <li>Completed: {completedEmis}</li>\n                              <li>Pending: {pendingEmis}</li>\n                            </ul>\n                          </div>\n\n                          <strong>EMI Details:</strong>\n                          <table className=\"table table-sm table-bordered mt-2\">\n                            <thead className=\"table-secondary\">\n                              <tr>\n                                <th>Amount</th>\n                                <th>Due Date</th>\n                                <th>Status</th>\n                                <th>Source</th>\n                                <th>Target</th>\n                                <th>Action</th>\n                              </tr>\n                            </thead>\n                            <tbody>\n                              {emiList.map((emi, idx) => {\n                                const isPaid =\n                                  emi.collection_status === \"Completed\";\n\n                                return (\n                                  <tr key={idx}>\n                                    <td>{emi.amount} ₹</td>\n                                    <td>\n                                      {emi.coll_emiDue_date?.split(\"T\")[0]}\n                                    </td>\n                                    <td>\n                                      <span\n                                        className={`badge ${\n                                          isPaid ? \"bg-success\" : \"bg-danger\"\n                                        }`}\n                                      >\n                                        {isPaid ? \"Paid\" : \"Unpaid\"}\n                                      </span>\n                                    </td>\n                                    <td>{emi.source_acc_name || \"N/A\"}</td>\n                                    <td>{emi.target_acc_name || \"N/A\"}</td>\n                                    <td>\n                                      <button\n                                        className={`btn btn-sm ${\n                                          isPaid\n                                            ? \"btn-success\"\n                                            : \"btn-outline-success\"\n                                        }`}\n                                        onClick={() => handleEditOneEmi(emi)}\n                                        disabled={isPaid}\n                                      >\n                                        Mark Paid\n                                      </button>\n                                    </td>\n                                  </tr>\n                                );\n                              })}\n                            </tbody>\n                          </table>\n\n                          <div className=\"text-end\">\n                            <button\n                              className=\"btn btn-sm btn-success\"\n                              onClick={() => handleEditAllEmi(emiList)}\n                              disabled={allEmisPaid}\n                            >\n                              <i className=\"bi bi-check-circle me-1\" />\n                              Mark All as Paid\n                            </button>\n                          </div>\n                        </td>\n                      </tr>\n                    )}\n                  </React.Fragment>\n                );\n              })\n            ) : (\n              <tr>\n                <td colSpan=\"7\" className=\"text-center\">\n                  No upcoming transactions found.\n                </td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nexport default UpcomingTransactions;\n"],"names":["get","post","useApi","combinedList","setCombinedList","useState","expandedRow","setExpandedRow","searchTerm","setSearchTerm","fetchTransactions","async","search","arguments","length","undefined","bookId","localStorage","getItem","response","endPoints","get_all_upcoming_collections_and_transactions","params","data","collections","transactions","combined","sort","a","b","Date","transaction_date","error","console","message","useEffect","handleBookChange","e","window","addEventListener","removeEventListener","_jsxs","className","children","_jsx","type","placeholder","value","onChange","target","map","item","_item$transaction_dat","_item$coll_kisht_type","isCollection","emiList","emi_transaction","totalEmis","completedEmis","filter","collection_status","pendingEmis","allEmisPaid","React","concat","id","onClick","prev","transaction_type","split","transaction_time","category","description","target_acc_name","coll_total_amount","amount","colSpan","coll_kisht_type","toUpperCase","emi","idx","_emi$coll_emiDue_date","isPaid","coll_emiDue_date","source_acc_name","payload","accountId","to_account","coll_emi_times","transaction_id","updateCollectionStatus","status","alert","handleEditOneEmi","disabled","_emis$","emis","handleEditAllEmi"],"sourceRoot":""}