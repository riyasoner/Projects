import React, { useEffect, useState } from "react";
import { Formik, Field, Form, FieldArray, ErrorMessage } from "formik";
import * as Yup from "yup";
import useApi from "../../hooks/useApi";
import endpoints from "../../api/endpoints";
import { toast } from "react-toastify";
import { useNavigate } from "react-router-dom";
import { FaArrowLeft, FaTrashAlt } from "react-icons/fa";
import dayjs from "dayjs";
import {
  generateProductSku,
  generateVariantSku,
} from "../../utils/sku";



const AddProduct = () => {
  const { post, get } = useApi();
  const userId = localStorage.getItem("userId");
  const userType = localStorage.getItem("userType");
  const [categories, setCategories] = useState([]);
  const navigate = useNavigate();
  const [selectedSubcategories, setSelectedSubcategories] = useState([]);
  const [selectedCategories, setSelectedCategories] = useState([]);
  const [isCustomization, setCustomization] = useState(false)




  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const response = await get(endpoints.getAllMainCategories);
        setCategories(response.data || []);
      } catch (error) {
        console.log(error.message || "Error fetching categories");
      }
    };
    fetchCategories();
  }, []);

  const initialValues = {
    title: "",
    description: "",
    categoryId: "",
    mainCategoryId: '',
    subCategoryId: "",
    brand: "",
    price: "",
    discountPercent: "",
    prepaidDiscountType: "",
    prepaidDiscountValue: "",
    isCustomisable: isCustomization,
    customFields: [""],
     paymentOptions: ["online", "wallet+online", "cod"],
    sku: "", // 🔸 autogenerated
    stock: "",
    features: [""],
    specifications: [{ key: "", value: "" }],
    warranty: "",
    returnPolicy: "",
    shippingInfo: "",
    keywords: [""],
    isCustomisableNote: "",
    productImages: [],
    variantImages: [],
    variants: [
      {
        variantName: "",
        color: "",
        size: "",
        storage: "",
        sku: "", // 🔸 autogenerated per‑variant
        price: "",
        discountPercent: "",
        stock: "",
      },
    ],
  };

  const validationSchema = Yup.object({
    title: Yup.string().required("Title is required"),
    description: Yup.string().required("Description is required"),
    categoryId: Yup.string().required("Category is required"),
    mainCategoryId: Yup.string().required("Main Category is required"),
    subCategoryId: Yup.string().required("Sub Category is required"),
    brand: Yup.string().required("Brand is required"),
    price: Yup.number().required("Price is required"),
    stock: Yup.number().required("Stock is required"),
    discountPercent: Yup.number().required("Discount is required"),
    sku: Yup.string(),
    features: Yup.array().of(Yup.string().required("Feature is required")),
    keywords: Yup.array().of(Yup.string().required("Keywords is required")),
    specifications: Yup.array().of(
      Yup.object({
        key: Yup.string().required("Key is required"),
        value: Yup.string().required("Value is required"),
      })
    ),
    warranty: Yup.string(),
    returnPolicy: Yup.string(),
    shippingInfo: Yup.string(),
    // prepaidDiscountType: Yup.string().oneOf(["percentage", "fixed"], "Invalid discount type"),
    // prepaidDiscountValue: Yup.number()
    //   .when("prepaidDiscountType", {
    //     is: (val) => val === "percentage" || val === "fixed",
    //     then: Yup.number().required("Discount value is required").min(0),
    //     otherwise: Yup.number().notRequired(),
    //   }),

    variants: Yup.array().of(
      Yup.object({
        variantName: Yup.string().required("Variant name is required"),
        color: Yup.string(),
        size: Yup.string(),
        storage: Yup.string(),
        sku: Yup.string(),
        price: Yup.number().required("Price is required"),
        discountPercent: Yup.number().required("Discount is required"),
        stock: Yup.number().required("Stock is required"),
      })
    ),
  });

  const handleSubmit = async (values, { resetForm }) => {
    try {
      const formData = new FormData();

      // Append normal fields except special ones
      Object.keys(values).forEach((key) => {
        if (
          key !== "productImages" &&
          key !== "variantImages" &&
          key !== "variants" &&
          key !== "features" &&
          key !== "specifications" &&
          key !== "customFields" &&
          key !== "paymentOptions" &&
          key !== "keywords"
        ) {
          formData.append(key, values[key]);
        }
      });

      // Images
      values.productImages.forEach((file) => {
        formData.append("productImages", file);
      });
      values.variantImages.forEach((imageGroup, index) => {
        if (Array.isArray(imageGroup)) {
          imageGroup.forEach((file) => {
            formData.append(`variantImages[${index}]`, file);
          });
        }
      });

      // ✅ Convert specifications array -> object
      const specificationsObject = {};
      values.specifications.forEach((item) => {
        if (item.key && item.value) {
          specificationsObject[item.key] = item.value;
        }
      });

      // ✅ Append in required format (NOT stringified array/object)
      let paymentOptionsValue = (values.paymentOptions || []).map((opt) =>
        opt === "wallet" ? "wallet+online" : opt
      );
      formData.append("keywords", JSON.stringify(values.keywords))
      formData.append("paymentOptions", JSON.stringify(paymentOptionsValue));
      formData.append("customFields", JSON.stringify(values.customFields || []));
      formData.append("features", JSON.stringify(values.features || [])); // ["a","b"]
      formData.append("specifications", JSON.stringify(specificationsObject || {})); // {k:v}
      formData.append("variants", JSON.stringify(values.variants || []));
      formData.append("addedBy", userType);
      formData.append("adminId", userId);

      const response = await post(endpoints.addProduct, formData);
      toast.success(response.message || "Product added successfully");
      resetForm();
      setTimeout(() => {
        navigate(-1);
      }, 1500);
    } catch (error) {
      toast.error(error.message || "Something went wrong");
    }
  };


  return (
    <div className="max-w-5xl mx-auto p-6 bg-white rounded shadow mt-10">
      <div className="flex justify-end mb-4">
        <button
          onClick={() => navigate(-1)}
          className="inline-flex items-center gap-2 px-4 py-2 rounded bg-gray-200 text-gray-700 hover:bg-gray-300 active:bg-gray-400 transition-colors"
        >
          <FaArrowLeft size={14} />
          Back
        </button>
      </div>
      <h2 className="text-2xl font-bold mb-6">Add New Product</h2>

      <Formik
        initialValues={initialValues}
        validationSchema={validationSchema}
        onSubmit={handleSubmit}
      >
        {({ values, setFieldValue }) => {
          /**
           * 🔄 AUTO‑GENERATE SKUs every time relevant fields change
           */
          useEffect(() => {
            // ----- PRODUCT SKU -----
            if (values.title && values.brand) {
              const newSku = generateProductSku(values);
              if (values.sku !== newSku) {
                setFieldValue("sku", newSku, false);
              }
            }

            // ----- VARIANT SKUs -----
            const updatedVariants = values.variants.map((variant) => {
              const newVarSku = generateVariantSku(values.sku, variant);
              return variant.sku === newVarSku
                ? variant
                : { ...variant, sku: newVarSku };
            });
            if (
              JSON.stringify(updatedVariants) !== JSON.stringify(values.variants)
            ) {
              setFieldValue("variants", updatedVariants, false);
            }
          }, [values.title, values.brand, values.sku, values.variants, setFieldValue]);

          return (
            <Form encType="multipart/form-data">
              <div className="grid grid-cols-2 gap-4">
                {/* Common fields */}
                {[
                  "title",
                  "description",
                  "brand",
                  "price",
                  "stock",
                  "discountPercent",
                  "sku",
                  "warranty",
                  "returnPolicy",
                  "shippingInfo",
                  // "isCustomisableNote"
                ].map((field) => (
                  <div key={field}>
                    <label className="block mb-1 capitalize">{field}</label>
                    <Field
                      name={field}
                      readOnly={field === "sku"}
                      className={`w-full border px-3 py-2 rounded ${field === "sku" ? "bg-gray-100 cursor-not-allowed" : ""
                        }`}
                    />
                    <ErrorMessage
                      name={field}
                      component="div"
                      className="text-red-500 text-sm"
                    />
                  </div>
                ))}
                <div>
                  <label className="block mb-1" htmlFor="">Prepaid Discount Type</label>
                  <Field as="select" name="prepaidDiscountType" className="w-full border px-3 py-2 rounded">
                    <option value="">Select</option>
                    <option value="percentage">Percentage</option>
                    <option value="fixed">Fixed</option>
                  </Field>
                  {/* <ErrorMessage name="prepaidDiscountType" component="div" className="text-red-500 text-sm" /> */}
                </div>
                <div>
                  <label className="block mb-1" htmlFor="">Prepaid Discount Value</label>

                  <Field
                    type="number"
                    name="prepaidDiscountValue"
                    className="w-full border px-3 py-2 rounded"
                  />
                  {/* <ErrorMessage name="prepaidDiscountValue" component="div" className="text-red-500 text-sm" /> */}
                </div>



                {/* Category dropdown */}
                <div>
                  <label className="block mb-1">Main Category</label>
                  <select
                    className="w-full border px-3 py-2 rounded"
                    onChange={(e) => {
                      const selectedMainCatId = parseInt(e.target.value);
                      const selectedCategory = categories.find(cat => cat.id === selectedMainCatId);

                      setFieldValue("mainCategoryId", selectedMainCatId); // ✅

                      if (selectedCategory?.categories?.length > 0) {
                        setSelectedCategories(selectedCategory.categories);
                        setSelectedSubcategories([]);
                        setFieldValue("categoryId", "");        // clear sub level
                        setFieldValue("subCategoryId", "");     // clear sub-sub level
                      } else {
                        setSelectedCategories([]);
                        setSelectedSubcategories([]);
                        setFieldValue("categoryId", "");
                        setFieldValue("subCategoryId", "");
                      }
                    }}
                  >
                    <option value="">Select  Category</option>
                    {categories.map((mainCat) => (
                      <option key={mainCat.id} value={mainCat.id}>
                        {mainCat.name}
                      </option>
                    ))}
                  </select>
                </div>

                {selectedCategories?.length > 0 && (
                  <div className="mt-0">
                    <label className="block mb-1"> Category</label>
                    <select
                      className="w-full border px-3 py-2 rounded"
                      onChange={(e) => {
                        const selectedCatId = parseInt(e.target.value);
                        const selectedSub = selectedCategories.find(cat => cat.id === selectedCatId);

                        setFieldValue("categoryId", selectedCatId); // ✅

                        if (selectedSub?.subCategories?.length > 0) {
                          setSelectedSubcategories(selectedSub.subCategories);
                          setFieldValue("subCategoryId", "");
                        } else {
                          setSelectedSubcategories([]);
                          setFieldValue("subCategoryId", "");
                        }
                      }}
                    >
                      <option value="">Select Category</option>
                      {selectedCategories.map((cat) => (
                        <option key={cat.id} value={cat.id}>
                          {cat.name}
                        </option>
                      ))}
                    </select>
                  </div>
                )}

                {selectedSubcategories?.length > 0 && (
                  <div className="mt-0">
                    <label className="block mb-1">Sub Category</label>
                    <select
                      className="w-full border px-3 py-2 rounded"
                      onChange={(e) => setFieldValue("subCategoryId", parseInt(e.target.value))}
                    >
                      <option value="">Select Sub Category</option>
                      {selectedSubcategories.map((sub) => (
                        <option key={sub.id} value={sub.id}>
                          {sub.name}
                        </option>
                      ))}
                    </select>
                  </div>
                )}







                {/* Product Images */}
                <div className="">
                  <label className="block mb-1">Product Images</label>
                  <input
                    type="file"
                    accept="image/*"
                    onChange={(e) => {
                      const file = e.target.files[0];
                      if (file) {
                        const updated = [...values.productImages, file];
                        setFieldValue("productImages", updated);
                      }
                      e.target.value = null;
                    }}
                    className="w-full border border-gray-700 p-2 rounded-[5px]"
                  />

                  {values.productImages.length > 0 && (
                    <div className="mt-3 grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4">
                      {values.productImages.map((img, index) => (
                        <div key={index} className="relative group border p-2 rounded shadow-sm">
                          <img
                            src={URL.createObjectURL(img)}
                            alt={`product-img-${index}`}
                            className="w-full h-32 object-cover rounded"
                          />
                          <button
                            type="button"
                            className="absolute top-1 right-1 bg-white text-red-500 text-sm rounded-full p-1 shadow hover:bg-red-100"
                            onClick={() => {
                              const updated = values.productImages.filter((_, i) => i !== index);
                              setFieldValue("productImages", updated);
                            }}
                          >
                            <FaTrashAlt />
                          </button>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
                <div className="col-span-2 flex items-center gap-2">
                  <Field
                    type="checkbox"
                    name="isCustomisable"
                    checked={values.isCustomisable}
                    onChange={(e) => {
                      setFieldValue("isCustomisable", e.target.checked);
                      setCustomization(e.target.checked); // agar alag state bhi chahiye
                    }}
                    className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                  />
                  <label htmlFor="isCustomisable" className="text-gray-700">
                    Is Customisable
                  </label>
                </div>

                {isCustomization && (
                  <div className="col-span-2">
                    <h3 className="font-semibold mb-2">Custom Fields</h3>
                    <FieldArray name="customFields">
                      {({ push, remove }) => (
                        <div className="space-y-2">
                          {values.customFields.map((_, index) => (
                            <div key={index} className="flex gap-2">
                              <Field
                                name={`customFields.${index}`}
                                className="flex-1 border px-3 py-2 rounded"
                              />
                              <button
                                type="button"
                                onClick={() => remove(index)}
                                className="bg-red-500 text-white px-2 rounded"
                              >
                                <FaTrashAlt />
                              </button>
                            </div>
                          ))}
                          <button
                            type="button"
                            onClick={() => push("")}
                            className="text-blue-600"
                          >
                            + Add Custom Fields
                          </button>
                        </div>
                      )}
                    </FieldArray>
                  </div>
                )}

                <div className="">
                  <label className="block mb-1" htmlFor="isCustomisableNote">Customisable Note</label>
                  <Field
                    name="isCustomisableNote"
                    type="text"
                    className="w-full border px-3 py-2 rounded"
                    placeholder="Enter note"
                  />
                  {/* <ErrorMessage name="isCustomisableNote" component="div" className="text-red-500 text-sm" /> */}
                </div>


                {/* Payment Options */}

                <div className="col-span-2">
                  <h3 className="font-semibold mb-2">Payment Options</h3>
                  <div className="space-y-2 ">
                    {["online", "wallet", "cod"].map((option, index) => (
                      <label key={index} className="flex items-center gap-5">
                        <Field
                          type="checkbox"
                          name="paymentOptions"
                          value={option}
                          className="w-4 h-4 "
                           
               
              disabled={option === "online" || option === "wallet"} // prevent uncheck
                        
                        />
                        <span className="capitalize p-1">{option}</span>
                      </label>
                    ))}
                  </div>
                </div>

                {/* Featres */}

                <div className="col-span-2">
                  <h3 className="font-semibold mb-2">Features</h3>
                  <FieldArray name="features">
                    {({ push, remove }) => (
                      <div className="space-y-2">
                        {values.features.map((_, index) => (
                          <div key={index} className="flex gap-2">
                            <Field
                              name={`features.${index}`}
                              className="flex-1 border px-3 py-2 rounded"
                            />
                            <button
                              type="button"
                              onClick={() => remove(index)}
                              className="bg-red-500 text-white px-2 rounded"
                            >
                              <FaTrashAlt />
                            </button>
                          </div>
                        ))}
                        <button
                          type="button"
                          onClick={() => push("")}
                          className="text-blue-600"
                        >
                          + Add Feature
                        </button>
                      </div>
                    )}
                  </FieldArray>
                </div>

                {/* Specifications */}
                <div className="col-span-2">
                  <h3 className="font-semibold mb-2">Specifications</h3>
                  <FieldArray name="specifications">
                    {({ push, remove }) => (
                      <div className="space-y-3">
                        {values.specifications.map((spec, index) => (
                          <div key={index} className="flex gap-2 items-center">
                            <Field
                              name={`specifications.${index}.key`}
                              placeholder="Key"
                              className="flex-1 border px-3 py-2 rounded"
                            />
                            <Field
                              name={`specifications.${index}.value`}
                              placeholder="Value"
                              className="flex-1 border px-3 py-2 rounded"
                            />
                            <button
                              type="button"
                              onClick={() => remove(index)}
                              className="bg-red-500 text-white px-2 py-2 rounded"
                            >
                              <FaTrashAlt />
                            </button>
                          </div>
                        ))}
                        <button
                          type="button"
                          onClick={() => push({ key: "", value: "" })}
                          className="text-blue-600"
                        >
                          + Add Specification
                        </button>
                      </div>
                    )}
                  </FieldArray>
                </div>
                {/* Keywords */}


                <div className="col-span-2">
                  <h3 className="font-semibold mb-2">Keywords</h3>
                  <FieldArray name="keywords">
                    {({ push, remove }) => (
                      <div className="space-y-2">
                        {values.keywords.map((_, index) => (
                          <div key={index} className="flex gap-2">
                            <Field
                              name={`keywords.${index}`}
                              className="flex-1 border px-3 py-2 rounded"
                            />
                            <button
                              type="button"
                              onClick={() => remove(index)}
                              className="bg-red-500 text-white px-2 rounded"
                            >
                              <FaTrashAlt />
                            </button>
                          </div>
                        ))}
                        <button
                          type="button"
                          onClick={() => push("")}
                          className="text-blue-600"
                        >
                          + Add Keywords
                        </button>
                      </div>
                    )}
                  </FieldArray>
                </div>

                {/* Variants */}
                <div className="col-span-2">
                  <h3 className="font-semibold mb-2">Variants</h3>
                  <FieldArray name="variants">
                    {({ push, remove }) => (
                      <div className="space-y-4">
                        {values.variants.map((_, index) => (
                          <div
                            key={index}
                            className="border p-4 rounded bg-gray-50"
                          >
                            {/* Variant fields */}
                            {[
                              "variantName",
                              "color",
                              "size",
                              "storage",
                              "sku",
                              "price",
                              "discountPercent",
                              "stock",
                            ].map((field) => (
                              <div key={field}>
                                <label className="block mb-1 capitalize">
                                  {field}
                                </label>
                                <Field
                                  name={`variants.${index}.${field}`}
                                  readOnly={field === "sku"}
                                  className={`w-full border px-3 py-2 rounded ${field === "sku"
                                    ? "bg-gray-100 cursor-not-allowed"
                                    : ""
                                    }`}
                                />
                                <ErrorMessage
                                  name={`variants.${index}.${field}`}
                                  component="div"
                                  className="text-red-500 text-sm"
                                />
                              </div>
                            ))}

                            {/* Variant Images Upload */}
                            <div className="mt-2">
                              <label className="block mb-1">Upload  Images</label>
                              <input
                                type="file"
                                multiple
                                onChange={(e) => {
                                  const files = Array.from(e.target.files);
                                  if (files.length > 0) {
                                    const updated = [...values.variantImages];
                                    const existing = updated[index] || [];
                                    updated[index] = [...existing, ...files];
                                    setFieldValue("variantImages", updated);
                                  }
                                  e.target.value = null;
                                }}
                                className="w-full border border-gray-300 p-2 rounded-[5px]"
                              />

                              {values.variantImages[index]?.length > 0 && (
                                <div className="mt-2 grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4">
                                  {values.variantImages[index].map((img, i) => (
                                    <div key={i} className="relative group border p-2 rounded shadow-sm">
                                      <img
                                        src={URL.createObjectURL(img)}
                                        alt={`preview-${i}`}
                                        className="w-full h-32 object-cover rounded"
                                      />
                                      <button
                                        type="button"
                                        className="absolute top-1 right-1 bg-white text-red-500 text-sm rounded-full p-1 shadow hover:bg-red-100"
                                        onClick={() => {
                                          const updated = values.variantImages[index].filter((_, j) => j !== i);
                                          const allGroups = [...values.variantImages];
                                          allGroups[index] = updated;
                                          setFieldValue("variantImages", allGroups);
                                        }}
                                      >
                                        <FaTrashAlt />
                                      </button>
                                    </div>
                                  ))}
                                </div>
                              )}
                            </div>


                            <button
                              type="button"
                              onClick={() => remove(index)}
                              className="text-red-600 mt-2"
                            >
                              ❌ Remove Variant
                            </button>
                          </div>
                        ))}

                        <button
                          type="button"
                          onClick={() => {
                            const base = values.variants[0] || {};
                            push({
                              variantName: "",
                              color: "",
                              size: "",
                              storage: "",
                              sku: "", // will be auto‑generated next render
                              price: base.price || "",
                              discountPercent: base.discountPercent || "",
                              stock: base.stock || "",
                            });
                          }}
                          className="text-blue-600"
                        >
                          + Add Variant
                        </button>
                      </div>
                    )}
                  </FieldArray>
                </div>
              </div>

              <button
                type="submit"
                className="mt-6 button text-white px-6 py-2 rounded hover:bg-gray-900"
              >
                Submit Product
              </button>
            </Form>
          );
        }}
      </Formik>
    </div>
  );
};

export default AddProduct;
